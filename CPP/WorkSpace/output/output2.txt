// It's a wonderful life.
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define DEBUG 1
const ll N = 2000000;
const ll MOD = 998244353;
const ll MAX = 1e18;

int n,a[N],b[N],bg,tp;
struct Node{
    int al,ar,bl,br,idx;
    int l,r;
}nodes[N];

class SegTree{
public:
    struct Node{
        int a,b;
        Node(){
            a = b = 0;
        }
    }nodes[N*4];
    #define ls (rt << 1)
    #define rs (rt << 1 | 1)
    Node merge(Node L,Node R){
        Node M;
        M.a = __gcd(L.a,R.a);
        M.b = __gcd(L.b,R.b);
        return M;
    }
    void build(int rt,int l,int r){
        if (l == r){
            nodes[rt].a = a[l];
            nodes[rt].b = b[l];
            return;
        }
        int mid = l + r >> 1;
        build(ls,l,mid),build(rs,mid+1,r);
        nodes[rt] = merge(nodes[ls],nodes[rs]);
    }
    void pd(int rt){

    }
    void update(int rt,int l,int r,int ql,int qr){
        if (ql <= l && r <= qr){
            return;
        }
        int mid = l+r>>1;
        pd(rt);
        if (ql <= mid){
            update(ls,l,mid,ql,qr);
        }
        if (qr >= mid + 1){
            update(rs,mid+1,r,ql,qr);
        }
        nodes[rt] = merge(nodes[ls],nodes[rs]);
        return;
    }
    Node query(int rt,int l,int r,int ql,int qr){
        if (ql > qr){
            return Node();
        }
        if (ql <= l && r <= qr){
            return nodes[rt];
        }
        int mid = l+r>>1;
        pd(rt);
        if (ql > mid){
            return query(rs,mid+1,r,ql,qr);
        }else if (qr < mid + 1){
            return query(ls,l,mid,ql,qr);
        }else{
            return merge(query(ls,l,mid,ql,qr),query(rs,mid+1,r,ql,qr));
        }
    }
}solver;

void solve(){
    cin >> n;
    for (int i = 1;i<n+1;i++){
        cin >> a[i];
    }
    for (int i = 1;i<n+1;i++){
        cin >> b[i];
    }

    for (int i = n;i>0;i--){
        ++tp;
        nodes[tp].al = a[i],nodes[tp].bl = b[i];
        nodes[tp].ar = solver.query(1,1,n,i + 1,n).a;
        nodes[tp].br = solver.query(1,1,n,i + 1,n).b;
        nodes[tp].idx = i;
        nodes[tp].r = bg,nodes[bg].l = tp;
        bg = tp;

        int cur = bg;
        while (){
            nodes[cur].al = solver.query(1,1,n,i,);
        }
    }
    return;
}

signed main(){
    freopen("input.txt","r",stdin);
    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    int _ = 1;
    cin >> _;
    while (_--){
        solve();
    }
    return 0;
}
